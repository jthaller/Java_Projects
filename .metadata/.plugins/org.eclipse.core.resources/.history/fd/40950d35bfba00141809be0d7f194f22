import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Point2D;



import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.util.Hashtable;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Double;
import java.util.ArrayList;

public class ShapeViewer{
	private  ArrayList<Shape> shapes;
	private double width;
	private double height;
	JFrame f = new JFrame();
	Timer timer;
	private int FPS;

	public double getWidth()
	{
		return this.width;
	}

	public void setWidth(double w){
		this.width = w;
	}

	public double getHeight(){
		return this.height;
	}

	public void setHeight(double h){
		this.height = h;
	}

	public int getFPS(){
		return FPS;
	}

	public void setFPS(int FPS){
		this.FPS = FPS;
	}

	public ShapeViewer(double width, double height) {	
		this.width = width;
		this.height = height;
	}

	public ArrayList<Shape> getShapes(){
		return shapes;
	}



	public class ShapeComponent extends JComponent {
		//private double theta = .1; //radians. default =.1
		//private double height = getSize().getHeight();
		//private double width = getSize().getWidth();
		//this ^ should go elsewhere

		//use setTheta to speed up rotation?

		public void paintComponent(Graphics g)
		{
			//recover Graphics2D
			Graphics2D g2 = (Graphics2D) g;
			//		Point2D.Double center = new Point2D.Double(getSize().getWidth()/2, getSize().getHeight()/2);

			for(int i=0; i < shapes.size(); i++ ){
				//				ArrayList<Line2D.Double> shapes = ShapeViewer.getLines(i); 
				for(int j=0; j < shapes.get(i).drawShape(width,height).size(); j++)
					g2.draw(shapes.get(i).drawShape(width,height).get(j));
			}

		}

	}

	public  void run(){

		f.setSize(500,500);
		f.setTitle("Rotation Project");
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		ShapeComponent comp = new ShapeComponent(); 
		//Okay, in here you're going to do two things 1) deal with button layout if you're going to have more buttons
		//2) put alllllll the action listeneres (you could declarre them outside of the method but i don't think that matters)
		//So now, im going to leave you and you're goint to make slider and a timer ( the slider clearl y chages the timer value) that every
		// so often (couple times a second maybe) rotates all your shapes by some angle (arbitrary)

		//Create the slider
		int FPS_MIN = 0;
		int FPS_MAX = 30;
		int FPS_INIT = 5; //just so i can change around to mess with
		JSlider speed = new JSlider(JSlider.HORIZONTAL,
				FPS_MIN, FPS_MAX, FPS_INIT);
		speed.addChangeListener((ChangeListener) this);
		speed.setMajorTickSpacing(2);
		speed.setMinorTickSpacing(1);
		speed.setPaintTicks(true);
		speed.setPaintLabels(true);

		JButton rotateButton = new JButton("Rotate Line");
		rotateButton.addActionListener(new RotateListener());

		JButton colorButton = new JButton("Change Color");
		colorButton.addActionListener(new ColorListener());

		JButton addShapeButton = new JButton("Add Shape");
		addShapeButton.addActionListener(new AddShapeListener());

		JPanel buttonPanel = new JPanel();
		buttonPanel.add(rotateButton);
		buttonPanel.add(colorButton);
		buttonPanel.add(addShapeButton);



		//		ArrayList<Point2D.Double> points = new ArrayList<Point2D.Double>();
		//		points.add(new Point2D.Double(0, f.getSize().getHeight()/2)); //starting pt1
		//		points.add(new Point2D.Double(f.getSize().getWidth(), f.getSize().getHeight()/2)); //starting pt2
		//
		//		Shape shape = new Shape(points);

		f.getContentPane().add(BorderLayout.SOUTH, buttonPanel);
		f.getContentPane().add(BorderLayout.CENTER, comp);
		//		f.add(comp);
		f.setVisible(true);

	}

	class RotateListener implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			rotate();
			f.repaint();
		}

		public void rotate(){
			timer = new Timer(50, this);
			timer.start();
			for(int i=0; i < shapes.size(); i++ ){
				shapes.get(i).rotate(.2);
			}
		}
	}

	class SliderListener implements ChangeListener {
		public void stateChanged(ChangeEvent e) {
			JSlider source = (JSlider)e.getSource();
			if (!source.getValueIsAdjusting()) {
				setFPS((int)source.getValue()); //this the best way????
			}
		}
	}

	class ColorListener implements ActionListener{
		public void actionPerformed(ActionEvent event){
			int red = (int) (Math.random() * 256);
			int green = (int) (Math.random() * 256);
			int blue = (int) (Math.random() * 256);

			Color randomColor = new Color(red, green, blue);
			for(int i=0; i < shapes.size(); i++ ){
				shapes.get(i).setColor(randomColor); //the fuck is this?
			}
		}
	}

	class AddShapeListener implements ActionListener{
		public void actionPerformed(ActionEvent e){

		}
	}


	public static void main(String[] args){
		ShapeViewer a = new ShapeViewer(500,600);
		a.run();
	}

}
