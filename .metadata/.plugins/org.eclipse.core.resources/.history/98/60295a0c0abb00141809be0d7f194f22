import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.geom.Point2D;









import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.util.Hashtable;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Double;
import java.util.ArrayList;

public class ShapeViewer{
	private  ArrayList<Shape> shapes;
	private double width;
	private double height;
	JFrame f = new JFrame();
	Timer timer;
	private int FPS;

	public double getWidth()
	{
		return this.width;
	}

	public void setWidth(double w){
		this.width = w;
	}

	public double getHeight(){
		return this.height;
	}

	public void setHeight(double h){
		this.height = h;
	}

	//	public int getFPS(){
	//		return FPS;
	//	}
	//
	//	public void setFPS(int FPS){
	//		this.FPS = FPS;
	//	}

	public ShapeViewer(double width, double height) {	
		this.width = width;
		this.height = height;
	}

	public ArrayList<Shape> getShapes(){
		return shapes;
	}



	public class ShapeComponent extends JComponent {
		//private double theta = .1; //changing fps instead

		public void paintComponent(Graphics g)
		{
			//recover Graphics2D
			Graphics2D g2 = (Graphics2D) g;
			//		Point2D.Double center = new Point2D.Double(getSize().getWidth()/2, getSize().getHeight()/2);

			//Rectangle a = new Rectangle(0,0,10,10);
			//g2.draw(a);

			for(int i=0; i < shapes.size(); i++ ){
				g2.setColor(shapes.get(i).getColor());
				for(int j=0; j < shapes.get(i).drawShape(getWidth(),getHeight()).size(); j++)
				{
					//					System.out.println(shapes.get(i).drawShape(width,height).get(j).getX1());
					//					System.out.println(shapes.get(i).drawShape(width,height).get(j).getX2());
					//					System.out.println(shapes.get(i).drawShape(width,height).get(j).getY1());
					//					System.out.println(shapes.get(i).drawShape(width,height).get(j).getY2());

					g2.draw(shapes.get(i).drawShape(getWidth(),getHeight()).get(j));
				}
//				g2.setColor(shapes.get(shapes.size()-1).getColor()); //attempt to change last line only

				//To see where center is
				//				g2.setColor(Color.RED);
				//				g2.draw(new Line2D.Double(shapes.get(i).getCenterX()*width,shapes.get(i).getCenterY()*height,
				//						shapes.get(i).getCenterX()*width+10,shapes.get(i).getCenterY()*height+10));
				//				g2.setColor(Color.BLUE);
				//				g2.draw(new Line2D.Double(f.getSize().getWidth()/2,f.getSize().getHeight()/2,
				//						f.getSize().getWidth()/2 + 15,f.getSize().getHeight()/2 + 15));
				//				g2.setColor(Color.BLACK);


			}

		}

	}

	public void run(){

		f.setSize(500,600);
				f.setMinimumSize(new Dimension(475,127));
		f.setTitle("Rotation Project");
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		timer = new Timer(15,new TimerListener()); //I thought the getFPS() would be it. damnit

		ShapeComponent comp = new ShapeComponent(); 

		//Create the slider
		int FPS_MIN = 0;
		int FPS_MAX = 25;
		int FPS_INIT = 15; //just so i can change around to mess with
		JSlider speed = new JSlider(JSlider.HORIZONTAL,
				FPS_MIN, FPS_MAX, FPS_INIT);
		speed.addChangeListener(new SliderListenerSpeed()); //or (changelister) this
		speed.setMajorTickSpacing(10);
		speed.setMinorTickSpacing(2);
		speed.setPaintTicks(true);
		speed.setPaintLabels(true);
		Hashtable labelTable = new Hashtable();
		labelTable.put( new Integer( FPS_MIN ), new JLabel("Fast") );
		labelTable.put( new Integer( FPS_MAX ), new JLabel("Slow") );
		speed.setLabelTable( labelTable );



		JButton rotateButton = new JButton("Rotate");
		rotateButton.addActionListener(new RotateListener());

		JButton colorButton = new JButton("Change Color");
		colorButton.addActionListener(new ColorListener());

		JButton addShapeButton = new JButton("Add Line");
		addShapeButton.addActionListener(new AddShapeListener());

		JButton resetButton = new JButton("Reset");
		resetButton.addActionListener(new ResetListener());

		JButton stopButton = new JButton("Stop");
		stopButton.addActionListener(new StopListener());

		JPanel buttonPanel = new JPanel();
		buttonPanel.add(rotateButton);
		buttonPanel.add(stopButton);
		buttonPanel.add(colorButton);
		buttonPanel.add(addShapeButton);
		buttonPanel.add(resetButton);


		JPanel sliderPanel = new JPanel();
		sliderPanel.add(speed);



		ArrayList<Point2D.Double> points = new ArrayList<Point2D.Double>();
		points.add(new Point2D.Double(0, 0)); //starting pt1
		points.add(new Point2D.Double(1,1)); //starting pt2


		Shape shape = new Shape(points);
		shapes = new ArrayList<Shape>();
		shapes.add(shape);


		f.addComponentListener(new ComponentAdapter(){
			public void componentResized(ComponentEvent e){
				setHeight(f.getContentPane().getHeight());
				setWidth(f.getSize().getWidth());
			}
		});

		f.getContentPane().add(BorderLayout.CENTER, comp);
		f.getContentPane().add(BorderLayout.NORTH, sliderPanel);
		f.getContentPane().add(BorderLayout.SOUTH, buttonPanel);

		f.setVisible(true);

	}

	class TimerListener implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			rotate();
			f.repaint();
		}
	}

	class RotateListener implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			timer.start();
		}
	}

	public void rotate(){ // send this a direction "dir" and rotate by .2*dir where dir E{-1,1} if want to reverse
		for(int i=0; i < shapes.size(); i++ ){
			shapes.get(i).rotate(.015);
		}
	}


	class SliderListenerSpeed implements ChangeListener {
		public void stateChanged(ChangeEvent e) {
			JSlider source = (JSlider)e.getSource();

			if (!source.getValueIsAdjusting()) {
				//				setFPS((int)source.getValue());
				timer.setDelay((int)source.getValue());
				f.repaint();
			}
		}
	}

	class StopListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			timer.stop();
		}
	}


	class AddShapeListener implements ActionListener{
	
		public void actionPerformed(ActionEvent e){

			ArrayList<Point2D.Double> points = new ArrayList<Point2D.Double>();
			points.add(new Point2D.Double(0, 0)); //starting pt1
			points.add(new Point2D.Double(1,1)); //starting pt2
			shapes.add(new Shape(points));
			f.repaint();
		}
	}

	class ResetListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			shapes.clear();
			ArrayList<Point2D.Double> points = new ArrayList<Point2D.Double>();
			points.add(new Point2D.Double(0, 0)); //starting pt1
			points.add(new Point2D.Double(1,1)); //starting pt2
			Shape shape = new Shape(points);
			shapes = new ArrayList<Shape>();
			shapes.add(shape);
			timer.stop();
			f.repaint();
		}
	}

	class ColorListener implements ActionListener{
		public void actionPerformed(ActionEvent event){
			int red = (int) (Math.random() * 256);
			int green = (int) (Math.random() * 256);
			int blue = (int) (Math.random() * 256);
			for (int i =0; i<shapes.size();i++){
				Color randomColor = new Color(red, green, blue);
				shapes.get(i).setColor(randomColor); 
			}
		}
	}


	public static void main(String[] args){
		ShapeViewer a = new ShapeViewer(500,600);
		a.run();
	}

}
