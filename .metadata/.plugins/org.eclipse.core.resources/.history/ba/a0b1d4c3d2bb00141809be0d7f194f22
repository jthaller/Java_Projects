//Jeremy Thaller p7
//Sowntharya
import java.awt.Color;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;


public class Shape {

	private ArrayList<Point2D.Double> points;
	private double centerX;
	private double centerY;
	private Color c = Color.BLACK;
	
	public Color getColor(){
		return this.c;
		}
	
	public void setColor(Color color){
		this.c = color;
		}
	
	public double getCenterX(){
		return this.centerX;}
	
	public double getCenterY(){
		return this.centerY;}
	
	
	//creates a shape when given a set of points. Also sets the center
	public Shape(ArrayList<Point2D.Double> points){
		this.points=points;
		double x =0;
		double y =0;
		for(int i = 0; i<points.size();i++)
		{
			x+= points.get(i).getX();
			y+= points.get(i).getY();
		
		}
		this.centerX = x/points.size(); //if 2 points, it's a line and center is divided by 2. if triangle, divided by 3, etc.
		this.centerY = y/points.size();
	}
	

	//creates a shape if you already know its center
	public Shape(ArrayList<Point2D.Double> points, Point2D.Double center){
		this.points=points;
		center.setLocation(centerX,centerY);
	}

	

	public void rotate(double theta){ //theta is in radians. A Negative theta will rotate clockwise.  Positive rotates counterclockwise.
		for(int i = 0; i < points.size(); i++)
		{
			double x = Math.cos(theta)*(points.get(i).getX()- centerX) 
					+ Math.sin(theta)*(points.get(i).getY() -centerY) + centerX;
			double y = -Math.sin(theta)*(points.get(i).getX()- centerX) 
					+ Math.cos(theta)*(points.get(i).getY() -centerY) + centerY;
			points.get(i).setLocation(x, y);  
		}
	}
	
//	public ArrayList<Point2D.Double> toArrayList(ShapeComponent points){
//		return this.points;
//	}
//	
//	public int getSize(ShapeComponent points){
//		return points.toArrayList(points).size();
//	}
	
	//this is "get lines"
	public ArrayList<Line2D.Double> drawShape(double width, double height){
		
		ArrayList<Line2D.Double> lines = new ArrayList<Line2D.Double>();
		for(int i=0; i< points.size()-1; i++){
			
			lines.add(new Line2D.Double(points.get(i).getX()*width,
					points.get(i).getY()*height,
					points.get(i+1).getX()*width, //standardized so it's 0 to 1. makes things easier
					points.get(i+1).getY()*height));
		}
		
		lines.add(new Line2D.Double(points.get(0).getX()*width,
				points.get(0).getY()*height,
				points.get(points.size()-1).getX()*width,
				points.get(points.size()-1).getY()*height));
		return lines;
	}

	public static void main(String[] args){
		Point2D.Double a = new Point2D.Double(1,1);
		ArrayList<Point2D.Double> b = new ArrayList<Point2D.Double>();
		b.add(a);
		Shape test = new Shape(b);
		test.rotate((Math.PI)/2);
		System.out.println(b);
	}
}
